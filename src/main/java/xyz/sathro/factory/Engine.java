/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package xyz.sathro.factory;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.lwjgl.system.Configuration;
import xyz.sathro.factory.vulkan.renderers.HouseRenderer;
import xyz.sathro.factory.vulkan.renderers.UIRenderer;
import xyz.sathro.factory.window.MouseInput;
import xyz.sathro.factory.window.Window;
import xyz.sathro.vulkan.Vulkan;
import xyz.sathro.vulkan.renderer.MainRenderer;

import java.lang.reflect.Field;
import java.util.List;
import java.util.concurrent.ConcurrentMap;

public class Engine {
	private static final Logger logger = LogManager.getLogger(Engine.class);
	public static boolean debugMode = true;

	@SuppressWarnings("unchecked")
	public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException, ClassNotFoundException {
		logger.info("START");

		if (args.length > 0) {
			debugMode = Boolean.parseBoolean(args[0]);
		}

		if (debugMode) {
			logger.info("ENABLED DEBUG MODE");

			Configuration.DEBUG_MEMORY_ALLOCATOR.set(true);
			Configuration.DEBUG_STACK.set(true);
		}

		try {
			Window.init();
			MouseInput.init();
			Vulkan.initVulkan(List.of(HouseRenderer.INSTANCE, UIRenderer.INSTANCE));
			MainRenderer.mainLoop();
			Vulkan.cleanup();
			MouseInput.cleanup();
			Window.cleanup();
		} catch (Throwable e) {
			if (debugMode) {
				// hack to turn off memory leaks print if exception was caught, because they are useless in that scenario
				final Class<?> debugAllocator = Class.forName("org.lwjgl.system.MemoryManage$DebugAllocator");
				final Field allocations = debugAllocator.getDeclaredField("ALLOCATIONS");
				allocations.setAccessible(true);
				((ConcurrentMap<Long, ?>) allocations.get(null)).clear();

				final Class<?> memoryUtilLazyInit = Class.forName("org.lwjgl.system.MemoryUtil$LazyInit");
				final Field allocator = memoryUtilLazyInit.getDeclaredField("ALLOCATOR");
				allocator.setAccessible(true);

				final Field callbacks = debugAllocator.getDeclaredField("callbacks");
				callbacks.setAccessible(true);
				callbacks.set(allocator.get(null), new long[0]);
			}

			throw e;
		}

		logger.info("END");
	}
}
