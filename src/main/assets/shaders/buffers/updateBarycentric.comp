#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_gpu_shader_fp64 : enable

#define WORKGROUP_SIZE 32

layout (local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

struct Particle {
	dvec3 position;
	double mass;
	dvec3 prevPosition;
	double invMass;
	dvec3 velocity;
	double null;
//	dvec4 null; // external force?
};

struct AttachedVertex {
	int tetIndex;
	float baryX;
	float baryY;
	float baryZ;
};

struct Vertex {
	float posX;
	float posY;
	float posZ;

	float colorR;
	float colorG;
	float colorB;

	float normalX;
	float normalY;
	float normalZ;
};

readonly layout(std430, set = 0, binding = 0) buffer particlesBuffer {
	Particle[] particles;
};

readonly layout(set = 1, binding = 0) buffer attachedVertices {
	AttachedVertex[] modelVertices;
};

readonly layout(set = 1, binding = 1) buffer tetrahedraParticleIndices {
	int[] indices;
};

readonly layout(set = 1, binding = 2) buffer modelVertexIndices {
	int[] modelIndices;
};

writeonly layout(std430, set = 1, binding = 3) buffer vertexBuffer {
	Vertex[] vertices;
};

readonly layout(push_constant) uniform constants {
	double dt;
	double invDtSquared;
	double compliance;
	int count;
	int	constraintOffset;
};

void main() {
	if (gl_GlobalInvocationID.x >= count) return;

	int tetIndex = modelVertices[gl_GlobalInvocationID.x].tetIndex * 4;
	float baryW = 1 - modelVertices[gl_GlobalInvocationID.x].baryX - modelVertices[gl_GlobalInvocationID.x].baryY - modelVertices[gl_GlobalInvocationID.x].baryZ;

	vertices[gl_GlobalInvocationID.x].posX = 0;
	vertices[gl_GlobalInvocationID.x].posY = 0;
	vertices[gl_GlobalInvocationID.x].posZ = 0;

	vec3 vec;
	vec = vec3(particles[indices[tetIndex]].position) * modelVertices[gl_GlobalInvocationID.x].baryX;
	vertices[gl_GlobalInvocationID.x].posX += vec.x;
	vertices[gl_GlobalInvocationID.x].posY += vec.y;
	vertices[gl_GlobalInvocationID.x].posZ += vec.z;

	vec = vec3(particles[indices[tetIndex + 1]].position) * modelVertices[gl_GlobalInvocationID.x].baryY;
	vertices[gl_GlobalInvocationID.x].posX += vec.x;
	vertices[gl_GlobalInvocationID.x].posY += vec.y;
	vertices[gl_GlobalInvocationID.x].posZ += vec.z;

	vec = vec3(particles[indices[tetIndex + 2]].position) * modelVertices[gl_GlobalInvocationID.x].baryZ;
	vertices[gl_GlobalInvocationID.x].posX += vec.x;
	vertices[gl_GlobalInvocationID.x].posY += vec.y;
	vertices[gl_GlobalInvocationID.x].posZ += vec.z;

	vec = vec3(particles[indices[tetIndex + 3]].position) * baryW;
	vertices[gl_GlobalInvocationID.x].posX += vec.x;
	vertices[gl_GlobalInvocationID.x].posY += vec.y;
	vertices[gl_GlobalInvocationID.x].posZ += vec.z;

	/*
	for (int i = 0; i < modelVertices.size(); i++) {
		AttachedVertex vertex = modelVertices.get(i);
		final Tetrahedron tet = tetrahedra[vertex.tetIndex];

		final Vector3d vec = surfacePositions[i];

		vec.zero();
		vec.fma(vertex.baryX, tet.particles[0].getPosition());
		vec.fma(vertex.baryY, tet.particles[1].getPosition());
		vec.fma(vertex.baryZ, tet.particles[2].getPosition());
		vec.fma(1 - vertex.baryX - vertex.baryY - vertex.baryZ, tet.particles[3].getPosition());
	}
	*/
}