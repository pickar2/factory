#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_gpu_shader_fp64 : enable

#define WORKGROUP_SIZE 32

layout (local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

struct Particle {
	dvec3 position;
	double mass;
	dvec3 prevPosition;
	double invMass;
	dvec3 velocity;
	double null;
//	dvec4 null; // external force?
};

struct AttachedVertex {
	int tetIndex;
	float baryX;
	float baryY;
	float baryZ;
};

struct Vertex {
	float posX;
	float posY;
	float posZ;

	float colorR;
	float colorG;
	float colorB;

	float normalX;
	float normalY;
	float normalZ;
};

readonly layout(std430, set = 0, binding = 0) buffer particlesBuffer {
	Particle[] particles;
};

readonly layout(set = 1, binding = 0) buffer attachedVertices {
	AttachedVertex[] modelVertices;
};

readonly layout(set = 1, binding = 1) buffer tetrahedraParticleIndexes {
	int[] indices;
};

writeonly layout(std430, set = 1, binding = 3) buffer vertexBuffer {
	Vertex[] vertices;
};

readonly layout(push_constant) uniform constants {
	double dt;
	double invDtSquared;
	double compliance;
	int count;
	int	constraintOffset;
};

void main() {
	if (gl_GlobalInvocationID.x >= count) return;

	vertices[gl_GlobalInvocationID.x].normalX = 0;
	vertices[gl_GlobalInvocationID.x].normalY = 0;
	vertices[gl_GlobalInvocationID.x].normalZ = 0;

	/*
	for (Vector3f vector3f : normalMap) {
		vector3f.normalize();
	}
	*/
}