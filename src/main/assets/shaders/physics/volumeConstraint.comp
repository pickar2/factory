#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_gpu_shader_fp64 : enable

#define WORKGROUP_SIZE 32

layout (local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

struct Particle {
	dvec3 position;
	double mass;
	dvec3 prevPosition;
	double invMass;
	dvec3 velocity;
	double null;
//	dvec4 null; // external force?
};

layout(std430, set = 0, binding = 0) buffer particlesBuffer {
	Particle[] particles;
};

readonly layout(set = 1, binding = 0) buffer constraintParticleIndices {
	int[] particleIndices;
};

readonly layout(set = 1, binding = 1) buffer constraintRestVolumes {
	double[] restVolumes;
};

readonly layout(push_constant) uniform constants {
	double dt;
	double invDtSquared;
	double compliance;
	int count;
	int constraintOffset;
};

const int[4][3] idOrder = {
	{ 1, 3, 2 },
	{ 0, 2, 3 },
	{ 0, 3, 1 },
	{ 0, 1, 2 }
};

const double ONE_OVER_SIX = 1 / 6.0;

void main() {
	if (gl_GlobalInvocationID.x >= count) return;

	dvec3[4] grads;

	uint XPlusOffset = gl_GlobalInvocationID.x + constraintOffset;

	int[] indices = {
		particleIndices[XPlusOffset * 4],
		particleIndices[XPlusOffset * 4 + 1],
		particleIndices[XPlusOffset * 4 + 2],
		particleIndices[XPlusOffset * 4 + 3]
	};

	double w = 0;
	for (int i = 0; i < 4; i++) {
		int id0 = indices[idOrder[i][0]];
		int id1 = indices[idOrder[i][1]];
		int id2 = indices[idOrder[i][2]];

		grads[i] = particles[id1].position - particles[id0].position;

		grads[i] = cross(grads[i], particles[id2].position - particles[id0].position) * ONE_OVER_SIX;

		w += particles[indices[i]].invMass * dot(grads[i], grads[i]);
	}
	if (w == 0) return;

	dvec3 diff0 = particles[indices[1]].position - particles[indices[0]].position;
	dvec3 diff1 = particles[indices[2]].position - particles[indices[0]].position;
	dvec3 diff2 = particles[indices[3]].position - particles[indices[0]].position;

	double currentVolume = dot(cross(diff0, diff1), diff2) * ONE_OVER_SIX;

	double s = (restVolumes[XPlusOffset] - currentVolume) / (w + compliance * invDtSquared);

	if(abs(s) < 0.0000001) { return; }

	for (int i = 0; i < 4; i++) {
		particles[indices[i]].position += s * particles[indices[i]].invMass * grads[i];
	}
}