#version 460

#define WORKGROUP_SIZE 32

layout (local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

struct Particle {
	dvec4 position_mass;
	dvec4 prevPosition_invMass;
	dvec4 velocity_null;
	dvec4 null;// external force?
};

layout(set = 0, binding = 0) buffer particlesBuffer {
	Particle[] particles;
};

readonly layout(set = 1, binding = 0) buffer constraintParticleIndices {
	int[] particleIndices;
};

readonly layout(set = 1, binding = 1) buffer constraintRestVolumes {
	double[] restVolumes;
};

readonly layout(push_constant) uniform constants {
	double dt;
	double compliance;
	int count;
	int constraintOffset;
};

const int[4][3] idOrder = {
	{ 1, 3, 2 },
	{ 0, 2, 3 },
	{ 0, 3, 1 },
	{ 0, 1, 2 }
};

const double ONE_OVER_SIX = 1 / 6.0;

void main() {
	if (gl_GlobalInvocationID.x >= count) return;

	dvec3[4] grads;

	const uint XPlusOffset = gl_GlobalInvocationID.x + constraintOffset;

	const int[] indices = {
		particleIndices[XPlusOffset * 4],
		particleIndices[XPlusOffset * 4 + 1],
		particleIndices[XPlusOffset * 4 + 2],
		particleIndices[XPlusOffset * 4 + 3]
	};

	double w = 0;
	for (int i = 0; i < 4; i++) {
		const int id0 = indices[idOrder[i][0]];
		const int id1 = indices[idOrder[i][1]];
		const int id2 = indices[idOrder[i][2]];

		grads[i] = particles[id1].position_mass.xyz - particles[id0].position_mass.xyz;

		grads[i] = cross(grads[i], particles[id2].position_mass.xyz - particles[id0].position_mass.xyz) * ONE_OVER_SIX;

		w += particles[indices[i]].prevPosition_invMass.w * dot(grads[i], grads[i]);
	}
	if (w == 0) return;

	const dvec3 diff0 = particles[indices[1]].position_mass.xyz - particles[indices[0]].position_mass.xyz;
	const dvec3 diff1 = particles[indices[2]].position_mass.xyz - particles[indices[0]].position_mass.xyz;
	const dvec3 diff2 = particles[indices[3]].position_mass.xyz - particles[indices[0]].position_mass.xyz;

	const double currentVolume = dot(cross(diff0, diff1), diff2) * ONE_OVER_SIX;

	const double s = (restVolumes[XPlusOffset] - currentVolume) / (w + compliance / (dt * dt));

	if(abs(s) < 0.0001) { return; }

	for (int i = 0; i < 4; i++) {
		particles[indices[i]].position_mass.xyz += s * particles[indices[i]].prevPosition_invMass.w * grads[i];
	}

	/*
	double w = 0;
	for (int i = 0; i < 4; i++) {
		final Particle p0 = particles[idOrder[i][0]];
		final Particle p1 = particles[idOrder[i][1]];
		final Particle p2 = particles[idOrder[i][2]];

		p1.getPosition().sub(p0.getPosition(), grads[i]);
		final Vector3d diff2 = p2.getPosition().sub(p0.getPosition(), new Vector3d());

		grads[i].cross(diff2).mul(ONE_OVER_SIX);

		w += particles[i].getInvMass() * grads[i].lengthSquared();
	}
	if (w == 0) { return; }

	final Vector3d diff0 = particles[1].getPosition().sub(particles[0].getPosition(), temp1);
	final Vector3d diff1 = particles[2].getPosition().sub(particles[0].getPosition(), temp2);
	final Vector3d diff2 = particles[3].getPosition().sub(particles[0].getPosition(), temp3);

	final double currentVolume = diff0.cross(diff1).dot(diff2) * (ONE_OVER_SIX);
	final double s = -(currentVolume - restVolume) / (w + compliance / (dt * dt));

	for (int i = 0; i < 4; i++) {
		particles[i].getPosition().fma(s * particles[i].getInvMass(), grads[i]);
	}
	*/
}