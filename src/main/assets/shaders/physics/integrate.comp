#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_gpu_shader_fp64 : enable

#define WORKGROUP_SIZE 32

layout (local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

struct Particle {
	dvec4 position_mass;
	dvec4 prevPosition_invMass;
	dvec4 velocity_null;
	dvec4 null; // external force?
};

layout(set = 0, binding = 0) buffer particlesBuffer {
	Particle[] particles;
};

readonly layout(push_constant) uniform constants {
	double dt;
	double invDtSquared;
	double compliance;
	int count;
	int	constraintOffset;
};

void main() {
	if (gl_GlobalInvocationID.x >= count) return;

	const uint id = gl_GlobalInvocationID.x;

	particles[id].prevPosition_invMass.xyz = particles[id].position_mass.xyz;
	particles[id].velocity_null.y -= dt * 9.8; // gravity
	particles[id].position_mass.xyz += dt * particles[id].velocity_null.xyz;

//	particles[id].position_mass.y *= double(particles[id].position_mass.y >= 0);

	if (particles[id].position_mass.y < 0) {
		particles[id].position_mass.xz = particles[id].prevPosition_invMass.xz;
		particles[id].position_mass.y = 0;
	}

	/*
	prevPosition.set(position);

	velocity.fma(dt, externalForce);
	position.fma(dt, velocity);

	if (position.y < 0) {
//		position.set(prevPosition);
		position.y = 0;
	}
	*/
}