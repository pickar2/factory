import org.gradle.internal.os.OperatingSystem

plugins {
	id 'java'
	id 'application'
}

switch (OperatingSystem.current()) {
	case OperatingSystem.LINUX:
		def osArch = System.getProperty("os.arch")
		project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
			? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
			: "natives-linux"
		break
	case OperatingSystem.MAC_OS:
		project.ext.lwjglNatives = natives-macos
		break
	case OperatingSystem.WINDOWS:
		def osArch = System.getProperty("os.arch")
		project.ext.lwjglNatives = osArch.contains("64")
			? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
			: "natives-windows-x86"
		break
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of("$javaVersion")
	}
}

compileJava {
	options.release.set("$project.javaVersion" as Integer)
}

repositories {
	mavenCentral()
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
	compileOnly "org.projectlombok:lombok:$lombokVersion"
	annotationProcessor "org.projectlombok:lombok:$lombokVersion"
	testCompileOnly "org.projectlombok:lombok:$lombokVersion"
	testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
	implementation "org.jetbrains:annotations:$annotationsVersion"

	implementation "org.apache.logging.log4j:log4j-api:$log4jVersion"
	implementation "org.apache.logging.log4j:log4j-core:$log4jVersion"

	testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

	implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

	implementation "org.lwjgl:lwjgl"
	implementation "org.lwjgl:lwjgl-assimp"
	implementation "org.lwjgl:lwjgl-glfw"
	implementation "org.lwjgl:lwjgl-openal"
	implementation "org.lwjgl:lwjgl-rpmalloc"
	implementation "org.lwjgl:lwjgl-shaderc"
	implementation "org.lwjgl:lwjgl-stb"
	implementation "org.lwjgl:lwjgl-vma"
	implementation "org.lwjgl:lwjgl-vulkan"
	runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-rpmalloc::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-shaderc::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-vma::$lwjglNatives"
	if (lwjglNatives as String == "natives-macos") runtimeOnly "org.lwjgl:lwjgl-vulkan::$lwjglNatives"

	implementation "org.joml:joml:$jomlVersion"
	implementation "it.unimi.dsi:fastutil:$fastutilVersion"

	runtimeOnly files('src/main/assets')
}

application {
	mainClass.set("$project.mainClass")
}

test {
	useJUnitPlatform()
}

task copyRuntimeLibs(type: Copy) {
	from configurations.runtimeClasspath.findAll { it.name.endsWith("jar") }
	into "$buildDir/libs/libraries"
}

task copyAssets(type: Copy) {
	from "${projectDir}/src/main/assets"
	into "${buildDir}/libs/assets/"
}

jar {
	manifest {
		attributes(
				"Class-Path": configurations.runtimeClasspath.files.collect { "libraries/" + it.getName() }.join(" ") + " " + "./assets/",
				"Main-Class": "$mainClass"
		)
	}
	dependsOn copyRuntimeLibs
	dependsOn copyAssets
}

task fatJar(type: Jar) {
	archiveClassifier.set("fat")
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	from sourceSets.main.output

	dependsOn configurations.runtimeClasspath

	from {
		configurations.runtimeClasspath.findAll { it.name.endsWith("jar") }.collect { zipTree(it) } + configurations.runtimeClasspath + "/assets/"
	}

	manifest {
		attributes("Main-Class": "$mainClass")
	}
}
